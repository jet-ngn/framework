// import NGN2 from '../../lib/ngn.min.js'
import Renderer from '../renderer/Renderer.js'
import ManagedNode from '../renderer/ManagedNode.js'
import ReferenceElementProxy from './ReferenceElementProxy.js'
import ReferenceElement from './ReferenceElement.js'
import ReferenceCollection from './ReferenceCollection.js'
import ReferenceList from './ReferenceList.js'

export default class ReferenceManager {
  #context
  #self
  #selectors = {}
  #nodes = {}
  #reservedNames = ['add', 'remove', 'self']
  #applyContext = selector => `${this.#context.selector ? `${this.#context.selector} ` : ''}${selector}`

  handlers = new Map
  managedNodes = null

  constructor (context, selectors) {
    this.#context = context
    selectors = NGN.coalesce(selectors, {})

    for (let name in selectors) {
      if (!this.#referenceIsValid(name, selectors[name])) {
        delete selectors[name]
      }
    }

    // if (this.#context.constructor.name !== 'TemplateInstance') {
    //   selectors = Object.assign(selectors, {
    //     self: this.#context.selector
    //   })
    // }

    this.#selectors = selectors
  }

  get length () {
    return Object.keys(this.#selectors).length
  }

  get references () {
    return new ReferenceList(this, this.#context.self, this.#selectors, this.#nodes)
  }

  initialize (element) {
    if (element) {
      this.#self = element
    }

    this.handlers.clear()
  }

  add (name, node) {
    if (!this.#referenceIsValid(...arguments)) {
      return
    }

    if (typeof node === 'string') {
      this.#selectors[name] = node
      return
    }

    this.#nodes[name] = node
  }

  remove (name) {
    if (!this.#selectors.hasOwnProperty(name)) {
      return console.error(`Reference "${name}" not found.`)
    }

    delete this.#selectors[name]
  }

  get (name, manager = null) {
    if (this.#selectors.hasOwnProperty(name)) {
      return this.create(name, this.#selectors[name], manager)
    }

    if (this.#nodes.hasOwnProperty(name)) {
      return this.create(name, this.#nodes[name], manager)
    }

    console.error(`Reference "${name}" not found`)
    return null
  }

  create (name, node, manager = null) {
    if (name === 'self' && !this.#selectors.self) {
      return new ReferenceElement(this, name, this.#self)
    }

    let elements = []

    if (typeof node === 'string') {
      elements = manager ? manager.element.querySelectorAll(node) : document.querySelectorAll(node)
    }

    if (node instanceof ManagedNode) {
      elements = [node]
    }

    switch (elements.length) {
      case 0: return null
      case 1: return new ReferenceElement(this, name, elements[0])
      default: return new ReferenceCollection([...elements].map((element, index) => new ReferenceElement(this, index, element)))
    }
  }

  has (name) {
    return this.#selectors.hasOwnProperty(name)
  }

  registerHandler (element, type, evt, callback, threshold = 0) {
    let obj = {
      event: evt,
      type,
      callback
    }

    if (!this.handlers.has(element)) {
      return this.handlers.set(element, [obj])
    }

    let handlers = this.handlers.get(element)

    if (handlers.some(handler => handler.callback === callback)) {
      return
    }

    handlers.push(obj)
  }

  unregisterHandler (element, evt, callback) {
    if (!this.handlers.has(element)) {
      return console.error(`Reference element not found`)
    }

    let handlers = this.handlers.get(element).filter(handler => handler.callback !== callback)

    if (handlers.length === 0) {
      return this.handlers.delete(element)
    }

    this.handlers.set(element, handlers)
  }

  unregisterAllHandlers (element) {
    this.handlers.delete(element)
  }

  #referenceIsValid = (name, node) => {
    if (this.#reservedNames.includes(name)) {
      console.error(`Invalid reference "${name}". "${name}" is a reserved word`)
      return false
    }

    if (!(node instanceof ManagedNode) && typeof node !== 'string') {
      console.error(`Invalid reference "${name}". Expected an ManagedNode or a selector string but received ${NGN.typeof(node)}`)
      return false
    }

    return true
  }
}
