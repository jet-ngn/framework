name: Tag, Release, & Publish

on:
  push:
    branches:
      - master

jobs:
  build:
    name: 'Release'
    runs-on: ubuntu-latest
    steps:
        # Checkout updated source code
      - uses: actions/checkout@v2
        name: Checkout Code

      - uses: actions/setup-node@v1
        name: Setup Node.js
        with:
          node-version: '16'

      # - name: Test
      #   run: |
      #     npm test

      - name: Tag
        id: autotagger
        if: success()
        uses: butlerlogic/action-autotag@stable
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

        # If the new version/tag is a pre-release (i.e. 1.0.0-beta.1), create
        # an environment variable indicating it is a prerelease.
      - name: Pre-release
        if: steps.autotagger.outputs.tagname != ''
        run: |
          if [[ "${{ steps.autotagger.output.version }}" == *"-"* ]]; then echo "::set-env IS_PRERELEASE=true";else echo "::set-env IS_PRERELEASE=''";fi
          
      - name: Release
        id: create_release
        if: steps.autotagger.outputs.tagname != ''
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.autotagger.outputs.tagname }}
          release_name: ${{ steps.autotagger.outputs.tagname }}
          body: ${{ steps.autotagger.outputs.tagmessage }}
          draft: false
          prerelease: env.IS_PRERELEASE != ''

        # Build tarballs of the module code.
      # - name: Build Release Artifacts
      #   id: build_release
      #   if: steps.create_release.outputs.id != ''
      #   run: |
      #     mkdir -p ./dist
      #     cp -rf ./src/lib ./dist/lib
      #     cp -rf ./src/utilities ./dist/utilities
      #     cp -rf ./src/Application.js ./dist/Application.js
      #     cp -rf ./src/env.js ./dist/env.js
      #     cp -rf ./src/index.js ./dist/index.js
      #     cp -rf ./src/View.js ./dist/View.js
      #     cp -rf ./src/package-lock.json ./dist/package-lock.json
      #     cp -rf ./src/package.json ./dist/package.json

        # Upload tarballs to the release.
      # - name: Upload Release Artifacts
      #   uses: AButler/upload-release-assets@v2.0
      #   if: steps.create_release.outputs.id != ''
      #   with:
      #     files: '.dist/*.tar.gz'
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     release-tag: ${{ steps.autotagger.outputs.tagname }}

      - name: Publish to npm
        id: publish_npm
        if: steps.autotagger.outputs.tagname != ''
        uses: author/action-publish@stable
        with:
          scan: ./src
        env:
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}

      - name: Rollback Release
        if: failure() && steps.create_release.outputs.id != ''
        uses: author/action-rollback@stable
        with:
          tag: ${{ steps.autotagger.outputs.tagname }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Failure Notification
        if: failure() && steps.create_release.outputs.id != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github # Optional. (defaults to webhook app)
          SLACK_CHANNEL: author # Optional. (defaults to webhook)
          SLACK_AVATAR: "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Npm-logo.svg/320px-Npm-logo.svg.png"
        uses: Ilshidur/action-slack@master
        with:
          args: '@jet-ngn/framework ${{ steps.autotagger.outputs.tagname }} failed to publish and was rolled back.' # Optional

      - name: Success Notification
        if: success() && steps.autotagger.outputs.tagname != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github # Optional. (defaults to webhook app)
          SLACK_CHANNEL: author # Optional. (defaults to webhook)
          SLACK_AVATAR: "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Npm-logo.svg/320px-Npm-logo.svg.png"
        uses: Ilshidur/action-slack@master
        with:
          args: '@jet-ngn/framework ${{ steps.autotagger.outputs.tagname }} published to npm.' # Optional

      - name: Inaction Notification
        if: steps.autotagger.outputs.tagname == ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github # Optional. (defaults to webhook app)
          SLACK_CHANNEL: author # Optional. (defaults to webhook)
          SLACK_AVATAR: "https://cdn.freebiesupply.com/logos/large/2x/nodejs-icon-logo-png-transparent.png" # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
        uses: Ilshidur/action-slack@master
        with:
          args: "New code was added to jet-ngn/framework master branch." # Optional